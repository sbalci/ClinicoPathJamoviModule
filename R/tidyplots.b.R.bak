#' @title Comprehensive Tidy Plots with Advanced Statistical Visualization
#'
#' @description
#' Create publication-ready plots with extensive customization options,
#' statistical features, and advanced visualization capabilities using tidyplots.
#'
#' @importFrom R6 R6Class
#' @import jmvcore
#' @import tidyplots

tidyplotsClass <- if (requireNamespace('jmvcore')) R6::R6Class(
    "tidyplotsClass",
    inherit = tidyplotsBase,
    private = list(
        .escapeVar = function(x) {
            if (is.null(x) || x == "") return(x)
            # Escape variable names for safe rlang::sym() usage
            # Handles spaces, special characters, and ensures valid R names
            gsub("[^A-Za-z0-9_]+", "_", make.names(x))
        },

        .debug = function(...) {
            # Only show debug messages if enabled
            if (isTRUE(getOption("ClinicoPath.debug", FALSE))) {
                message(...)
            }
        },

        .init = function() {
            # Initialize plot size - make it much larger by default
            self$results$plot$setSize(1600, 1000)

            # Populate usage guide (always available)
            private$.generateHowToGuide()
        },

        .run = function() {
            # Populate documentation panels
            private$.populateGlossary()
            private$.generatePlotSummary()

            # Check if required variables are provided
            if (is.null(self$options$xvar) || is.null(self$options$yvar)) {
                self$results$instructions$setContent(
                    private$.createInstructions()
                )
                self$results$instructions$setVisible(TRUE)
                return()
            }

            # Hide instructions when variables are selected
            self$results$instructions$setVisible(FALSE)

            # Validate data
            if (nrow(self$data) == 0) {
                stop('Data contains no (complete) rows')
            }

            # Validate variables exist in data
            private$.validateVariables()
        },

        .plot = function(image, ...) {
            private$.debug("=== TIDYPLOTS DEBUG: Starting .plot function ===")

            # Get data and prepare variables
            plotData <- private$.prepareData()
            if (is.null(plotData)) {
                private$.debug("ERROR: plotData is NULL")
                return(FALSE)
            }
            private$.debug("DEBUG: plotData has", nrow(plotData), "rows and", ncol(plotData), "columns")

            # Extract plotting variables and escape them for safe sym() usage
            xvar_orig <- self$options$xvar
            yvar_orig <- self$options$yvar
            xvar <- private$.escapeVar(xvar_orig)
            yvar <- private$.escapeVar(yvar_orig)

            colorvar <- NULL
            if (!is.null(self$options$color) && self$options$color != "") {
                colorvar <- private$.escapeVar(self$options$color)
            }

            groupvar <- NULL
            if (!is.null(self$options$group) && self$options$group != "") {
                groupvar <- private$.escapeVar(self$options$group)
            }

            facetvar <- NULL
            if (!is.null(self$options$facet) && self$options$facet != "") {
                facetvar <- private$.escapeVar(self$options$facet)
            }

            message(paste("DEBUG: Variables - xvar:", xvar, "yvar:", yvar, "color:", colorvar, "group:", groupvar, "facet:", facetvar))

            # Check if required packages are available
            if (!requireNamespace("tidyplots", quietly = TRUE)) {
                stop("tidyplots package is not available")
            }

            if (!requireNamespace("rlang", quietly = TRUE)) {
                stop("rlang package is not available")
            }

            message("DEBUG: Packages available")

            # Initialize tidyplot with required aesthetics
            message("DEBUG: Creating tidyplot with basic aesthetics")
            # Build the aesthetic mapping
            aes_args <- list(x = rlang::sym(xvar), y = rlang::sym(yvar))

            if (!is.null(colorvar) && colorvar != "") {
                message(paste("DEBUG: Adding color aesthetic:", colorvar))
                aes_args$color <- rlang::sym(colorvar)
            }

            # Note: tidyplots may not support group aesthetic directly
            # Group functionality may be handled through color or facet
            if (!is.null(groupvar) && groupvar != "" &&
                (is.null(colorvar) || colorvar == "")) {
                message(paste("DEBUG: Using group as color:", groupvar))
                # Use group as color if no color variable is specified
                aes_args$color <- rlang::sym(groupvar)
            }

            message("DEBUG: Calling tidyplots::tidyplot")
            message(paste("DEBUG: Data dimensions:", nrow(plotData), "x", ncol(plotData)))
            message(paste("DEBUG: Data columns:", paste(names(plotData), collapse = ", ")))

            # Try simple approach first
            if (!is.null(colorvar) && colorvar != "") {
                message("DEBUG: Creating tidyplot with color")
                p <- plotData |> tidyplots::tidyplot(x = !!rlang::sym(xvar), y = !!rlang::sym(yvar), color = !!rlang::sym(colorvar))
            } else if (!is.null(groupvar) && groupvar != "" && (is.null(colorvar) || colorvar == "")) {
                message("DEBUG: Creating tidyplot with group as color")
                p <- plotData |> tidyplots::tidyplot(x = !!rlang::sym(xvar), y = !!rlang::sym(yvar), color = !!rlang::sym(groupvar))
            } else {
                message("DEBUG: Creating basic tidyplot")
                p <- plotData |> tidyplots::tidyplot(x = !!rlang::sym(xvar), y = !!rlang::sym(yvar))
            }
            message("DEBUG: tidyplot object created successfully")
            message(paste("DEBUG: Current plot type option:", self$options$plotType))
            message(paste("DEBUG: Alpha option:", self$options$alpha))

            # Add main plot elements
            p <- private$.addTidyPlotElements(p)

            # Add statistical elements
            p <- private$.addTidyStatisticalElements(p)

            # Add distribution elements
            p <- private$.addTidyDistributionElements(p)

            # Apply customization (including plot size)
            p <- private$.applyTidyCustomization(p)

            # Apply final adjustments (themes, axis manipulations, element removal)
            p <- private$.applyTidyFinalAdjustments(p)

            # Apply faceting if specified
            if (!is.null(facetvar) && facetvar != "") {
                p <- p |> tidyplots::split_plot(by = !!rlang::sym(facetvar))
            }

            print(p)
            return(TRUE)
        },

        .createInstructions = function() {
            paste0(
                "<div style='padding: 20px; background-color: #f8f9fa; border-left: 4px solid #007bff; margin: 10px 0;'>",
                "<h3 style='color: #007bff; margin-top: 0;'>Comprehensive Tidy Plots</h3>",
                "<h4>Create Advanced Statistical Visualizations</h4>",
                "<p>This tool creates publication-ready plots with extensive customization options.</p>",
                "<h4>Getting Started:</h4>",
                "<ol>",
                "<li><strong>Required:</strong> Select X and Y variables</li>",
                "<li><strong>Optional:</strong> Add Color, Group, or Facet variables</li>",
                "<li><strong>Customize:</strong> Choose plot types and statistical elements</li>",
                "</ol>",
                "<h4>Available Features:</h4>",
                "<ul>",
                "<li><strong>Plot Types:</strong> Points, Lines, Bars, Boxplots, Violin plots, Histograms</li>",
                "<li><strong>Statistics:</strong> Means, medians, error bars, confidence intervals</li>",
                "<li><strong>Testing:</strong> P-values, significance indicators</li>",
                "<li><strong>Styling:</strong> Color schemes, themes, custom labels</li>",
                "</ul>",
                "<p><em>Start by selecting X and Y variables to create your plot.</em></p>",
                "</div>"
            )
        },

        .validateVariables = function() {
            data <- self$data

            # Check if required variables exist in data
            if (!self$options$xvar %in% names(data)) {
                stop(paste("X variable", self$options$xvar, "not found in data"))
            }
            if (!self$options$yvar %in% names(data)) {
                stop(paste("Y variable", self$options$yvar, "not found in data"))
            }

            # Check optional variables
            if (!is.null(self$options$color) && self$options$color != "" &&
                !self$options$color %in% names(data)) {
                stop(paste("Color variable", self$options$color, "not found in data"))
            }
            if (!is.null(self$options$group) && self$options$group != "" &&
                !self$options$group %in% names(data)) {
                stop(paste("Group variable", self$options$group, "not found in data"))
            }
            if (!is.null(self$options$facet) && self$options$facet != "" &&
                !self$options$facet %in% names(data)) {
                stop(paste("Facet variable", self$options$facet, "not found in data"))
            }
        },

        .prepareData = function() {
            data <- self$data

            # Get all variables that will be used
            used_vars <- c(self$options$xvar, self$options$yvar)
            if (!is.null(self$options$color) && self$options$color != "") {
                used_vars <- c(used_vars, self$options$color)
            }
            if (!is.null(self$options$group) && self$options$group != "") {
                used_vars <- c(used_vars, self$options$group)
            }
            if (!is.null(self$options$facet) && self$options$facet != "") {
                used_vars <- c(used_vars, self$options$facet)
            }

            # Remove rows with missing values in used variables
            complete_data <- data[complete.cases(data[, used_vars, drop = FALSE]), ]

            if (nrow(complete_data) == 0) {
                stop("No complete cases found for the selected variables")
            }

            # Rename columns to escaped versions for safe tidyplots usage
            # This handles variables with spaces, special characters, etc.
            for (var in used_vars) {
                escaped <- private$.escapeVar(var)
                if (escaped != var) {
                    names(complete_data)[names(complete_data) == var] <- escaped
                }
            }

            return(complete_data)
        },

        .addTidyPlotElements = function(p) {
            plot_type <- self$options$plotType
            alpha <- self$options$alpha
            message(paste("DEBUG: Adding plot elements for type:", plot_type, "with alpha:", alpha))

            switch(plot_type,
                "points" = {
                    message(paste("DEBUG: Adding points with pointType:", self$options$pointType))
                    if (self$options$pointType == "jitter") {
                        message("DEBUG: Adding jittered points")
                        p <- p |> tidyplots::add_data_points_jitter(alpha = alpha)
                    } else if (self$options$pointType == "beeswarm") {
                        # Use shape parameter from options if available
                        shape_param <- if (!is.null(self$options$pointShape)) self$options$pointShape else 16
                        message(paste("DEBUG: Adding beeswarm points with shape:", shape_param))
                        p <- p |> tidyplots::add_data_points_beeswarm(alpha = alpha, shape = shape_param)
                    } else {
                        message("DEBUG: Adding basic data points")
                        p <- p |> tidyplots::add_data_points(alpha = alpha)
                    }
                },
                "line" = {
                    if (self$options$lineType == "curve") {
                        p <- p |> tidyplots::add_curve_fit(alpha = alpha)
                    } else if (self$options$lineType == "mean") {
                        p <- p |> tidyplots::add_mean_line(alpha = alpha)
                    } else if (self$options$lineType == "median") {
                        p <- p |> tidyplots::add_median_line(alpha = alpha)
                    } else {
                        p <- p |> tidyplots::add_line(alpha = alpha)
                    }
                },
                "bar" = {
                    if (self$options$barType == "mean") {
                        p <- p |> tidyplots::add_mean_bar(alpha = alpha)
                    } else if (self$options$barType == "count") {
                        p <- p |> tidyplots::add_count_bar(alpha = alpha)
                    } else if (self$options$barType == "sum") {
                        p <- p |> tidyplots::add_sum_bar(alpha = alpha)
                    } else {
                        p <- p |> tidyplots::add_mean_bar(alpha = alpha)
                    }
                },
                "barstack" = {
                    if (self$options$stackType == "absolute") {
                        p <- p |> tidyplots::add_barstack_absolute(alpha = alpha)
                    } else {
                        p <- p |> tidyplots::add_barstack_relative(alpha = alpha)
                    }
                },
                "boxplot" = {
                    p <- p |> tidyplots::add_boxplot(alpha = alpha)
                },
                "violin" = {
                    p <- p |> tidyplots::add_violin(alpha = alpha)
                    if (self$options$violinPoints) {
                        p <- p |> tidyplots::add_data_points_jitter(alpha = alpha * 0.6)
                    }
                },
                "histogram" = {
                    p <- p |> tidyplots::add_histogram(alpha = alpha, bins = self$options$histogramBins)
                },
                "area" = {
                    p <- p |> tidyplots::add_area(alpha = alpha)
                },
                "areastack" = {
                    if (self$options$stackType == "absolute") {
                        p <- p |> tidyplots::add_areastack_absolute(alpha = alpha)
                    } else {
                        p <- p |> tidyplots::add_areastack_relative(alpha = alpha)
                    }
                },
                "pie" = {
                    p <- p |> tidyplots::add_pie(alpha = alpha)
                },
                "donut" = {
                    p <- p |> tidyplots::add_donut(alpha = alpha)
                },
                "heatmap" = {
                    p <- p |> tidyplots::add_heatmap(alpha = alpha)
                },
                "ellipse" = {
                    p <- p |> tidyplots::add_ellipse(alpha = alpha)
                }
            )

            return(p)
        },

        .addTidyStatisticalElements = function(p) {
            # Add mean if requested
            if (self$options$showMean) {
                if (self$options$meanType == "dash") {
                    p <- p |> tidyplots::add_mean_dash()
                } else if (self$options$meanType == "dot") {
                    p <- p |> tidyplots::add_mean_dot()
                } else if (self$options$meanType == "value") {
                    p <- p |> tidyplots::add_mean_value()
                }
            }

            # Add median if requested
            if (self$options$showMedian) {
                if (self$options$medianType == "dash") {
                    p <- p |> tidyplots::add_median_dash()
                } else if (self$options$medianType == "dot") {
                    p <- p |> tidyplots::add_median_dot()
                } else if (self$options$medianType == "value") {
                    p <- p |> tidyplots::add_median_value()
                }
            }

            # Add sum if requested
            if (self$options$showSum) {
                if (self$options$sumType == "dash") {
                    p <- p |> tidyplots::add_sum_dash()
                } else if (self$options$sumType == "dot") {
                    p <- p |> tidyplots::add_sum_dot()
                } else if (self$options$sumType == "value") {
                    p <- p |> tidyplots::add_sum_value()
                }
            }

            # Add count if requested
            if (self$options$showCount) {
                if (self$options$countType == "dash") {
                    p <- p |> tidyplots::add_count_dash()
                } else if (self$options$countType == "dot") {
                    p <- p |> tidyplots::add_count_dot()
                } else if (self$options$countType == "value") {
                    p <- p |> tidyplots::add_count_value()
                }
            }

            # Add error bars if requested
            if (self$options$showSEM) {
                if (self$options$semType == "errorbar") {
                    p <- p |> tidyplots::add_sem_errorbar()
                } else {
                    p <- p |> tidyplots::add_sem_ribbon()
                }
            }

            if (self$options$showSD) {
                if (self$options$sdType == "errorbar") {
                    p <- p |> tidyplots::add_sd_errorbar()
                } else {
                    p <- p |> tidyplots::add_sd_ribbon()
                }
            }

            if (self$options$showCI) {
                if (self$options$ciType == "errorbar") {
                    p <- p |> tidyplots::add_ci95_errorbar()
                } else {
                    p <- p |> tidyplots::add_ci95_ribbon()
                }
            }

            # Add range if requested
            if (self$options$showRange) {
                if (self$options$rangeType == "errorbar") {
                    p <- p |> tidyplots::add_range_errorbar()
                } else {
                    p <- p |> tidyplots::add_range_ribbon()
                }
            }

            # Add statistical testing if requested
            if (self$options$showPValue) {
                p <- p |> tidyplots::add_test_pvalue()
            }

            if (self$options$showSignificance) {
                p <- p |> tidyplots::add_test_asterisks()
            }

            # Add reference lines if requested
            if (self$options$showReferenceLines) {
                message("DEBUG: Adding reference lines")
                ref_x <- if (!is.null(self$options$referenceX) && self$options$referenceX != "") {
                    message(paste("DEBUG: Parsing X reference values:", self$options$referenceX))
                    as.numeric(strsplit(self$options$referenceX, ",")[[1]])
                } else NULL

                ref_y <- if (!is.null(self$options$referenceY) && self$options$referenceY != "") {
                    message(paste("DEBUG: Parsing Y reference values:", self$options$referenceY))
                    as.numeric(strsplit(self$options$referenceY, ",")[[1]])
                } else NULL

                if (!is.null(ref_x) || !is.null(ref_y)) {
                    message("DEBUG: Calling add_reference_lines")
                    p <- p |> tidyplots::add_reference_lines(x = ref_x, y = ref_y)
                    message("DEBUG: Reference lines added")
                }
            }

            return(p)
        },

        .addTidyDistributionElements = function(p) {
            if (self$options$showDistribution) {
                if (self$options$distributionType == "density") {
                    # Note: tidyplots does not have native density curve support
                    # Using histogram with low alpha as visual approximation
                    p <- p |> tidyplots::add_histogram(alpha = 0.3, bins = 50)
                } else if (self$options$distributionType == "rug") {
                    # Note: tidyplots does not have native rug plot support
                    # Using data points at bottom as visual approximation
                    p <- p |> tidyplots::add_data_points(alpha = 0.6)
                }
            }

            return(p)
        },

        .applyTidyCustomization = function(p) {
            # Apply color scheme
            if (!is.null(self$options$color) && self$options$color != "") {
                color_scheme <- self$options$colorScheme

                # Discrete color schemes
                if (color_scheme == "friendly") {
                    p <- p |> tidyplots::adjust_colors(new_colors = tidyplots::colors_discrete_friendly)
                } else if (color_scheme == "seaside") {
                    p <- p |> tidyplots::adjust_colors(new_colors = tidyplots::colors_discrete_seaside)
                } else if (color_scheme == "friendly_long") {
                    p <- p |> tidyplots::adjust_colors(new_colors = tidyplots::colors_discrete_friendly_long)
                } else if (color_scheme == "apple") {
                    p <- p |> tidyplots::adjust_colors(new_colors = tidyplots::colors_discrete_apple)
                } else if (color_scheme == "ibm") {
                    p <- p |> tidyplots::adjust_colors(new_colors = tidyplots::colors_discrete_ibm)
                } else if (color_scheme == "candy") {
                    p <- p |> tidyplots::adjust_colors(new_colors = tidyplots::colors_discrete_candy)
                } else if (color_scheme == "alger") {
                    p <- p |> tidyplots::adjust_colors(new_colors = tidyplots::colors_discrete_alger)
                } else if (color_scheme == "metro") {
                    p <- p |> tidyplots::adjust_colors(new_colors = tidyplots::colors_discrete_metro)
                } else if (color_scheme == "rainbow") {
                    p <- p |> tidyplots::adjust_colors(new_colors = tidyplots::colors_discrete_rainbow)
                } else if (color_scheme == "custom") {
                    # Custom colors example from tidyplots
                    custom_colors <- c("#644296","#F08533","#3B78B0", "#D1352C")
                    p <- p |> tidyplots::adjust_colors(new_colors = custom_colors)
                }
                # Continuous color schemes
                else if (color_scheme == "viridis") {
                    p <- p |> tidyplots::adjust_colors(new_colors = tidyplots::colors_continuous_viridis)
                } else if (color_scheme == "inferno") {
                    p <- p |> tidyplots::adjust_colors(new_colors = tidyplots::colors_continuous_inferno)
                } else if (color_scheme == "mako") {
                    p <- p |> tidyplots::adjust_colors(new_colors = tidyplots::colors_continuous_mako)
                } else if (color_scheme == "turbo") {
                    p <- p |> tidyplots::adjust_colors(new_colors = tidyplots::colors_continuous_turbo)
                } else if (color_scheme == "rocket") {
                    p <- p |> tidyplots::adjust_colors(new_colors = tidyplots::colors_continuous_rocket)
                }
                # Diverging color schemes
                else if (color_scheme == "blue2red") {
                    p <- p |> tidyplots::adjust_colors(new_colors = tidyplots::colors_diverging_blue2red)
                } else if (color_scheme == "blue2brown") {
                    p <- p |> tidyplots::adjust_colors(new_colors = tidyplots::colors_diverging_blue2brown)
                } else if (color_scheme == "spectral") {
                    p <- p |> tidyplots::adjust_colors(new_colors = tidyplots::colors_diverging_spectral)
                } else if (color_scheme == "icefire") {
                    p <- p |> tidyplots::adjust_colors(new_colors = tidyplots::colors_diverging_icefire)
                }
            }

            # Apply custom labels
            if (self$options$plotTitle != "") {
                p <- p |> tidyplots::adjust_title(self$options$plotTitle)
            }
            if (self$options$xLabel != "") {
                p <- p |> tidyplots::adjust_x_axis_title(self$options$xLabel)
            }
            if (self$options$yLabel != "") {
                p <- p |> tidyplots::adjust_y_axis_title(self$options$yLabel)
            }
            if (!is.null(self$options$color) && self$options$color != "" && self$options$legendTitle != "") {
                p <- p |> tidyplots::adjust_legend_title(self$options$legendTitle)
            }

            # Apply caption if provided
            if (!is.null(self$options$plotCaption) && self$options$plotCaption != "") {
                p <- p |> tidyplots::adjust_caption(self$options$plotCaption)
            }

            # Apply font size
            if (self$options$fontSize != 12) {
                p <- p |> tidyplots::adjust_font(size = self$options$fontSize)
            }

            # Only apply size adjustments if user explicitly sets them
            # Let jamovi handle default sizing instead of tidyplots
            if (!is.null(self$options$plotWidth) && !is.null(self$options$plotHeight) &&
                self$options$plotWidth > 0 && self$options$plotHeight > 0) {
                message(paste("DEBUG: User set plot size to", self$options$plotWidth, "x", self$options$plotHeight))
                p <- p |> tidyplots::adjust_size(width = self$options$plotWidth, height = self$options$plotHeight)
            } else {
                message("DEBUG: Using jamovi default sizing (no tidyplots adjust_size)")
            }

            return(p)
        },

        .applyTidyFinalAdjustments = function(p) {
            # Apply axis label manipulations
            if (self$options$sortXAxisLabels) {
                p <- p |> tidyplots::sort_x_axis_labels()
            }

            if (self$options$reverseXAxisLabels) {
                p <- p |> tidyplots::reverse_x_axis_labels()
            }

            # Apply theme if specified
            theme_type <- self$options$plotTheme
            if (!is.null(theme_type) && theme_type != "default") {
                message(paste("DEBUG: Applying theme:", theme_type))
                switch(theme_type,
                    "tidyplot" = {
                        p <- p |> tidyplots::theme_tidyplot()
                    },
                    "ggplot2" = {
                        p <- p |> tidyplots::theme_ggplot2()
                    },
                    "minimal_x" = {
                        p <- p |> tidyplots::theme_minimal_x()
                    },
                    "minimal_y" = {
                        p <- p |> tidyplots::theme_minimal_y()
                    },
                    "minimal_xy" = {
                        p <- p |> tidyplots::theme_minimal_xy()
                    }
                )
            }

            # Remove axis lines if requested
            if (self$options$removeXAxisLine) {
                p <- p |> tidyplots::remove_x_axis_line()
            }

            if (self$options$removeYAxisLine) {
                p <- p |> tidyplots::remove_y_axis_line()
            }

            # Remove elements if requested
            if (self$options$removeLegend) {
                p <- p |> tidyplots::remove_legend()
            }

            if (self$options$removeLegendTitle) {
                p <- p |> tidyplots::remove_legend_title()
            }

            if (self$options$removeXAxis) {
                p <- p |> tidyplots::remove_x_axis()
            }

            if (self$options$removeXAxisLabels) {
                p <- p |> tidyplots::remove_x_axis_labels()
            }

            if (self$options$removeXAxisTitle) {
                p <- p |> tidyplots::remove_x_axis_title()
            }

            if (self$options$removeYAxis) {
                p <- p |> tidyplots::remove_y_axis()
            }

            if (self$options$removeYAxisLabels) {
                p <- p |> tidyplots::remove_y_axis_labels()
            }

            if (self$options$removeYAxisTitle) {
                p <- p |> tidyplots::remove_y_axis_title()
            }

            if (self$options$removePadding) {
                p <- p |> tidyplots::remove_padding()
            }

            return(p)
        }
    )
)