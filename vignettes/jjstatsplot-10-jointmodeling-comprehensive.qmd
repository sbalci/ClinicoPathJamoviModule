---
title: "Joint Longitudinal-Survival Modeling: A Comprehensive Guide"
author: "ClinicoPath"
date: "`r Sys.Date()`"
format: 
  html:
    toc: true
    toc-depth: 3
    number-sections: true
    theme: bootstrap
    code-folding: show
    fig-width: 10
    fig-height: 6
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = TRUE,
  warning = FALSE,
  message = FALSE,
  fig.align = "center",
  dpi = 300
)
```

# Introduction to Joint Longitudinal-Survival Modeling

Joint models simultaneously analyze two related processes:

1. **Longitudinal Process**: Biomarker measurements over time
2. **Survival Process**: Time to clinical event  
3. **Association**: How biomarker changes relate to survival risk

## Key Clinical Applications

- **Oncology**: PSA trajectory and cancer survival
- **Cardiology**: Biomarker trends and cardiovascular events
- **HIV**: CD4 count evolution and disease progression  
- **Nephrology**: Kidney function decline and ESRD
- **Transplant**: Biomarker monitoring and graft survival

## Advantages over Separate Analyses

- **Reduced Bias**: Accounts for informative dropout
- **Dynamic Predictions**: Risk updates with new biomarker values
- **Shared Information**: Borrowing strength between processes
- **Clinical Relevance**: Matches clinical decision-making

# Dataset Overview

We provide five example datasets for different clinical scenarios:

```{r load-packages}
library(ClinicoPath)
library(dplyr)
library(ggplot2)
library(survival)
library(knitr)
```

## PSA and Prostate Cancer Dataset

```{r psa-data}
data(psa_joint_data)

# Data structure
str(psa_joint_data)

# Summary statistics
psa_summary <- psa_joint_data %>%
  group_by(patient_id) %>%
  summarise(
    n_visits = n(),
    baseline_psa = first(psa_level),
    final_psa = last(psa_level),
    followup_time = max(visit_time),
    event = first(death_status),
    .groups = 'drop'
  )

kable(summary(psa_summary), caption = "PSA Dataset Summary")
```

### PSA Trajectory Visualization

```{r psa-trajectories, fig.height=8}
# Individual trajectories (sample of patients)
set.seed(123)
sample_patients <- sample(unique(psa_joint_data$patient_id), 20)
psa_sample <- psa_joint_data %>% filter(patient_id %in% sample_patients)

p1 <- ggplot(psa_sample, aes(x = visit_time, y = psa_level, color = stage)) +
  geom_line(aes(group = patient_id), alpha = 0.7) +
  geom_point(alpha = 0.8, size = 1) +
  facet_wrap(~stage, scales = "free_y") +
  labs(title = "PSA Trajectories by Tumor Stage",
       subtitle = "Sample of 20 patients",
       x = "Time (months)", y = "PSA (ng/mL)") +
  theme_bw() +
  scale_color_brewer(type = "qual", palette = "Set1")

# Population-level trajectories
p2 <- ggplot(psa_joint_data, aes(x = visit_time, y = psa_level, color = stage)) +
  geom_smooth(method = "loess", se = TRUE, alpha = 0.3) +
  labs(title = "Population PSA Trajectories by Stage",
       x = "Time (months)", y = "PSA (ng/mL)") +
  theme_bw() +
  scale_color_brewer(type = "qual", palette = "Set1")

print(p1)
print(p2)
```

### Survival Analysis

```{r psa-survival}
# Create survival object for unique patients
psa_surv <- psa_joint_data %>%
  select(patient_id, survival_time, death_status, stage, age, gleason_score) %>%
  distinct()

# Kaplan-Meier curves
km_fit <- survfit(Surv(survival_time, death_status) ~ stage, data = psa_surv)

# Plot survival curves
library(survminer)
ggsurvplot(km_fit, 
           data = psa_surv,
           title = "Survival by Tumor Stage",
           xlab = "Time (months)",
           ylab = "Survival Probability",
           risk.table = TRUE,
           pval = TRUE,
           conf.int = TRUE,
           palette = "Set1")
```

## CD4 Count and HIV Dataset

```{r cd4-analysis}
data(cd4_joint_data)

# Summary by ART adherence
cd4_summary <- cd4_joint_data %>%
  group_by(art_adherence) %>%
  summarise(
    patients = n_distinct(patient_id),
    observations = n(),
    mean_cd4 = round(mean(cd4_count, na.rm = TRUE), 0),
    median_cd4 = round(median(cd4_count, na.rm = TRUE), 0),
    events = sum(!duplicated(patient_id) & aids_death_status == 1),
    event_rate = round(events / patients * 100, 1),
    .groups = 'drop'
  )

kable(cd4_summary, caption = "CD4 Dataset Summary by ART Adherence")

# CD4 trajectories by adherence
ggplot(cd4_joint_data, aes(x = visit_time, y = cd4_count, color = art_adherence)) +
  geom_smooth(method = "loess", se = TRUE, size = 1.2) +
  geom_point(alpha = 0.1, size = 0.5) +
  labs(title = "CD4 Count Trajectories by ART Adherence",
       subtitle = "Population-level trends with confidence intervals",
       x = "Time (months)", y = "CD4 Count (cells/μL)",
       color = "ART Adherence") +
  theme_bw() +
  scale_color_manual(values = c("Poor" = "red", "Good" = "blue"))
```

## Simple Cancer Dataset (For Learning)

```{r simple-cancer}
data(simple_cancer_data)

# This is our simplest dataset for learning
simple_summary <- simple_cancer_data %>%
  group_by(treatment) %>%
  summarise(
    patients = n_distinct(patient_id),
    observations = n(),
    baseline_marker = round(mean(tumor_marker[visit_time == 0], na.rm = TRUE), 1),
    final_marker = round(mean(tumor_marker[visit_time == max(visit_time)], na.rm = TRUE), 1),
    events = sum(!duplicated(patient_id) & progression_status == 1),
    event_rate = round(events / patients * 100, 1),
    .groups = 'drop'
  )

kable(simple_summary, caption = "Simple Cancer Dataset Summary")

# Marker trajectories by treatment
ggplot(simple_cancer_data, aes(x = visit_time, y = tumor_marker, color = treatment)) +
  geom_smooth(method = "loess", se = TRUE, size = 1.2) +
  labs(title = "Tumor Marker Trajectories by Treatment",
       x = "Time (months)", y = "Tumor Marker (units/mL)") +
  theme_bw() +
  scale_color_brewer(type = "qual", palette = "Set2")
```

# Joint Modeling Analysis Examples

## Using ClinicoPath Joint Modeling Module

### Basic Analysis Steps

1. **Data Preparation**: Ensure data is in long format
2. **Variable Selection**: Choose longitudinal and survival variables  
3. **Model Specification**: Select trajectory and association structures
4. **Estimation**: Choose Bayesian or two-stage approach
5. **Validation**: Assess model performance
6. **Interpretation**: Clinical meaning of results

### Example 1: Simple Cancer Analysis

```{r joint-example-setup}
# For demonstration, we'll show the setup for joint modeling
# (Actual analysis would be run in jamovi interface)

cat("Joint Modeling Analysis Setup:\n\n")

cat("Dataset: simple_cancer_data\n")
cat("Variables:\n")
cat("- Patient ID: patient_id\n")
cat("- Longitudinal Time: visit_time\n") 
cat("- Biomarker: tumor_marker\n")
cat("- Survival Time: survival_time\n")
cat("- Event Status: progression_status\n")
cat("- Covariates: age, treatment\n\n")

cat("Model Options:\n")
cat("- Functional Form: Linear (default)\n")
cat("- Random Effects: Intercept + Slope\n")
cat("- Association: Current Value\n")
cat("- Estimation: Bayesian (JMbayes2)\n")
```

### Data Quality Checks

```{r data-quality}
# Function to check data quality for joint modeling
check_joint_data <- function(data, id_col, time_col, biomarker_col, surv_time_col, event_col) {
  
  cat("=== Data Quality Assessment ===\n\n")
  
  # Basic structure
  cat("1. Data Structure:\n")
  cat("   - Total observations:", nrow(data), "\n")
  cat("   - Unique patients:", length(unique(data[[id_col]])), "\n")
  cat("   - Average visits per patient:", round(nrow(data) / length(unique(data[[id_col]])), 1), "\n\n")
  
  # Missing values
  cat("2. Missing Values:\n")
  missing_biomarker <- sum(is.na(data[[biomarker_col]]))
  missing_time <- sum(is.na(data[[time_col]]))
  cat("   - Missing biomarker values:", missing_biomarker, "(", round(missing_biomarker/nrow(data)*100, 1), "%)\n")
  cat("   - Missing time values:", missing_time, "\n\n")
  
  # Visit patterns
  visit_counts <- table(table(data[[id_col]]))
  cat("3. Visit Patterns:\n")
  print(visit_counts)
  cat("\n")
  
  # Survival data
  surv_data <- data[!duplicated(data[[id_col]]), ]
  event_rate <- mean(surv_data[[event_col]]) * 100
  cat("4. Survival Data:\n")
  cat("   - Event rate:", round(event_rate, 1), "%\n")
  cat("   - Median follow-up:", round(median(surv_data[[surv_time_col]]), 1), "months\n\n")
  
  # Time range
  cat("5. Time Ranges:\n")
  cat("   - Biomarker follow-up: 0 -", round(max(data[[time_col]], na.rm = TRUE), 1), "months\n")
  cat("   - Survival follow-up: 0 -", round(max(surv_data[[surv_time_col]], na.rm = TRUE), 1), "months\n\n")
  
  # Recommendations
  cat("6. Recommendations:\n")
  if (event_rate < 10) {
    cat("   ⚠️  Low event rate (<10%) - consider longer follow-up or larger sample\n")
  }
  if (missing_biomarker/nrow(data) > 0.1) {
    cat("   ⚠️  High missing biomarker rate (>10%) - consider imputation methods\n")
  }
  if (length(unique(data[[id_col]])) < 50) {
    cat("   ⚠️  Small sample size (<50 patients) - results may be unstable\n")
  }
  cat("   ✅ Data appears suitable for joint modeling\n")
}

# Check simple cancer data
check_joint_data(simple_cancer_data, "patient_id", "visit_time", "tumor_marker", 
                "survival_time", "progression_status")
```

## Expected Analysis Results

### Model Output Interpretation

```{r interpretation-guide}
cat("=== Joint Model Results Interpretation Guide ===\n\n")

cat("1. LONGITUDINAL MODEL RESULTS\n")
cat("   - Fixed Effects: Population-average biomarker trajectory\n")
cat("   - Random Effects: Individual deviations from population average\n")
cat("   - Model Fit: AIC/BIC for model comparison\n\n")

cat("2. SURVIVAL MODEL RESULTS\n")
cat("   - Hazard Ratios: Effect of covariates on survival\n")
cat("   - Association Parameter: How biomarker affects survival risk\n")
cat("     * Positive: Higher biomarker = higher risk\n")
cat("     * Negative: Higher biomarker = lower risk\n\n")

cat("3. DYNAMIC PREDICTIONS\n")
cat("   - Individual risk profiles update with new biomarker values\n")
cat("   - Prediction horizons: 0.5, 1, 2, 3 years (typical)\n")
cat("   - Useful for personalized medicine decisions\n\n")

cat("4. MODEL VALIDATION\n")
cat("   - C-index: Discrimination ability (>0.7 is good)\n")
cat("   - Time-dependent AUC: Classification accuracy over time\n")
cat("   - Cross-validation: Internal validity assessment\n\n")

cat("5. CLINICAL INTERPRETATION\n")
cat("   - Association strength indicates biomarker utility\n")
cat("   - Dynamic predictions guide treatment timing\n")
cat("   - Individual trajectories identify high-risk patients\n")
```

# Advanced Features

## Multiple Biomarkers

```{r multi-biomarker-setup}
# Example of how to prepare data for multiple biomarkers
# (Feature available in the joint modeling module)

cat("Multiple Biomarker Joint Modeling:\n\n")
cat("When you have multiple longitudinal biomarkers:\n")
cat("1. Each biomarker gets its own trajectory model\n")
cat("2. All biomarkers can be associated with survival\n")
cat("3. Biomarkers can be correlated through random effects\n\n")

cat("Example Setup:\n")
cat("- Primary biomarker: PSA level\n") 
cat("- Secondary biomarkers: Hemoglobin, Weight\n")
cat("- All associated with prostate cancer survival\n")
cat("- Requires larger sample sizes (n > 200)\n")
```

## Competing Risks

```{r competing-risks}
# Kidney dataset has competing risks (ESRD vs Death)
kidney_events <- kidney_joint_data %>%
  select(patient_id, esrd_death_status) %>%
  distinct() %>%
  count(esrd_death_status) %>%
  mutate(
    event_type = case_when(
      esrd_death_status == 0 ~ "Censored",
      esrd_death_status == 1 ~ "ESRD", 
      esrd_death_status == 2 ~ "Death"
    ),
    proportion = round(n / sum(n) * 100, 1)
  )

kable(kidney_events, caption = "Competing Risks in Kidney Dataset")

cat("\nCompeting Risks Joint Modeling:\n")
cat("- ESRD and death compete as first events\n")
cat("- Joint models can handle competing risks\n") 
cat("- Biomarker affects cause-specific hazards\n")
cat("- Cumulative incidence functions available\n")
```

# Practical Guidelines

## Sample Size Considerations

```{r sample-size-guide}
cat("=== Sample Size Guidelines ===\n\n")

cat("Minimum Requirements:\n")
cat("- Patients: ≥50 (≥100 recommended)\n")
cat("- Events: ≥20 (≥50 recommended) \n")
cat("- Visits per patient: ≥3 (≥5 recommended)\n")
cat("- Event rate: ≥10%\n\n")

cat("For Advanced Features:\n")
cat("- Multiple biomarkers: ≥200 patients\n")
cat("- Competing risks: ≥300 patients\n")
cat("- Time-varying effects: ≥400 patients\n\n")

cat("Power Considerations:\n")
cat("- Higher association = smaller sample needed\n")
cat("- More visits per patient = better power\n")
cat("- Longer follow-up = more events = better power\n")
```

## Model Selection

```{r model-selection-guide}
cat("=== Model Selection Guidelines ===\n\n")

cat("1. TRAJECTORY MODELS\n")
cat("   - Linear: Simple, interpretable (default)\n")
cat("   - Quadratic: For curved trajectories\n")
cat("   - Splines: For complex, flexible shapes\n\n")

cat("2. ASSOCIATION STRUCTURES\n")
cat("   - Current Value: Biomarker level affects risk (most common)\n")
cat("   - Current Slope: Rate of change affects risk\n")
cat("   - Cumulative: Area under curve affects risk\n\n")

cat("3. ESTIMATION METHODS\n")
cat("   - Bayesian (JMbayes2): Full uncertainty, slower\n")
cat("   - Two-stage (joineR): Faster, approximate\n")
cat("   - Joint ML: Best efficiency, may not converge\n\n")

cat("4. MODEL COMPARISON\n")
cat("   - AIC/BIC for nested models\n")
cat("   - Cross-validation for predictive performance\n")
cat("   - Clinical knowledge for biological plausibility\n")
```

# Troubleshooting

## Common Issues and Solutions

```{r troubleshooting}
cat("=== Common Issues and Solutions ===\n\n")

cat("1. CONVERGENCE PROBLEMS\n")
cat("   Problem: Model fails to converge\n")
cat("   Solutions:\n")
cat("   - Reduce MCMC iterations for initial run\n")
cat("   - Try simpler functional form (linear vs splines)\n")
cat("   - Check for data quality issues\n")
cat("   - Switch to two-stage estimation\n\n")

cat("2. COMPUTATIONAL TIME\n")
cat("   Problem: Analysis takes too long\n") 
cat("   Solutions:\n")
cat("   - Reduce MCMC iterations (try 5000 initially)\n")
cat("   - Use fewer chains (2-3 instead of 4+)\n")
cat("   - Enable parallel processing\n")
cat("   - Consider two-stage estimation\n\n")

cat("3. INTERPRETATION DIFFICULTIES\n")
cat("   Problem: Results hard to understand\n")
cat("   Solutions:\n")
cat("   - Focus on association parameter sign and magnitude\n")
cat("   - Plot individual predicted trajectories\n")
cat("   - Use dynamic predictions for clinical scenarios\n")
cat("   - Consult with statistician for complex models\n\n")

cat("4. POOR MODEL FIT\n")
cat("   Problem: Model doesn't fit data well\n")
cat("   Solutions:\n")
cat("   - Try different functional forms\n")
cat("   - Add more covariates\n")
cat("   - Check for outliers or data errors\n")
cat("   - Consider time-varying effects\n")
```

# Resources and Further Reading

```{r resources}
cat("=== Additional Resources ===\n\n")

cat("📚 RECOMMENDED READING\n")
cat("- Rizopoulos D. Joint Models for Longitudinal and Time-to-Event Data (2012)\n")
cat("- Ibrahim JG, et al. Missing Data Methods in Longitudinal Studies (2005)\n")
cat("- Tsiatis AA, Davidian M. Joint modeling of longitudinal and time-to-event data (2004)\n\n")

cat("💻 SOFTWARE PACKAGES\n")
cat("- JMbayes2: Bayesian joint models in R\n")
cat("- joineR: Classical joint models in R  \n")
cat("- lcmm: Latent class mixed models\n")
cat("- frailtypack: Frailty models with R\n\n")

cat("🔗 USEFUL LINKS\n")
cat("- Joint modeling tutorial: https://drizopoulos.github.io/JMbayes2/\n")
cat("- Longitudinal data analysis: https://www.longitudinal-data.org/\n")
cat("- Survival analysis: https://www.ms.uky.edu/~mai/java/stat/survival.html\n\n")

cat("❓ GETTING HELP\n")
cat("- ClinicoPath documentation: Built-in help system\n")
cat("- Community forum: Post questions and examples\n")
cat("- Statistical consultation: For complex study designs\n")
```

---

## Summary

Joint longitudinal-survival modeling is a powerful technique for analyzing biomarker trajectories and survival outcomes simultaneously. The ClinicoPath joint modeling module provides:

- **User-friendly interface** with guided analysis steps
- **Multiple estimation methods** (Bayesian, two-stage, joint ML)  
- **Comprehensive output** with clinical interpretation
- **Dynamic prediction capabilities** for personalized medicine
- **Extensive validation tools** for model assessment

The example datasets provided cover common clinical scenarios and serve as templates for your own analyses. Start with the simple cancer dataset to learn the basics, then progress to more complex scenarios as you gain experience.

**Remember**: Joint modeling requires careful consideration of study design, adequate sample size, and clinical expertise for proper interpretation. When in doubt, consult with a biostatistician familiar with longitudinal data analysis.