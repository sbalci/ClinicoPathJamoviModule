% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deeplearningprediction.h.R
\name{deeplearningprediction}
\alias{deeplearningprediction}
\title{Deep Learning Image Prediction}
\usage{
deeplearningprediction(
  data,
  image_path_var,
  target_var,
  model_type = "vision_transformer",
  prediction_type = "classification",
  patch_size = 384,
  batch_size = 8,
  validation_split = 0.2,
  learning_rate = 1e-04,
  epochs = 10,
  attention_maps = TRUE,
  data_augmentation = TRUE,
  gray_zone_width = 5,
  thresholds = "",
  pretrained_weights = TRUE,
  freeze_backbone = FALSE,
  dropout_rate = 0.1,
  weight_decay = 1e-04,
  early_stopping = TRUE,
  save_model = FALSE,
  model_path = "",
  gpu_acceleration = TRUE,
  cross_validation = FALSE,
  cv_folds = 5,
  class_weights = TRUE,
  confidence_threshold = 0.8
)
}
\arguments{
\item{data}{the data as a data frame}

\item{image_path_var}{variable containing file paths to histological images}

\item{target_var}{dependent variable to predict (biomarker status,
classification)}

\item{model_type}{deep learning architecture for image analysis}

\item{prediction_type}{type of prediction task and output format}

\item{patch_size}{size of image patches for processing (pixels)}

\item{batch_size}{number of images processed simultaneously}

\item{validation_split}{proportion of data used for validation}

\item{learning_rate}{learning rate for model training}

\item{epochs}{number of training epochs}

\item{attention_maps}{create attention/saliency maps for model
explainability}

\item{data_augmentation}{apply image transformations during training}

\item{gray_zone_width}{width of gray zone for cumulative logit models}

\item{thresholds}{custom thresholds for ordinal prediction (comma-separated
numbers)}

\item{pretrained_weights}{initialize with ImageNet pretrained weights}

\item{freeze_backbone}{freeze pretrained backbone for fine-tuning}

\item{dropout_rate}{dropout rate for regularization}

\item{weight_decay}{L2 regularization weight decay}

\item{early_stopping}{stop training when validation loss stops improving}

\item{save_model}{save trained model for future use}

\item{model_path}{file path to save trained model}

\item{gpu_acceleration}{utilize GPU for faster training if available}

\item{cross_validation}{perform k-fold cross-validation}

\item{cv_folds}{number of cross-validation folds}

\item{class_weights}{apply class balancing weights for imbalanced datasets}

\item{confidence_threshold}{minimum confidence threshold for predictions}
}
\value{
A results object containing:
\tabular{llllll}{
\code{results$modelSummary} \tab \tab \tab \tab \tab a html \cr
\code{results$dataInfo} \tab \tab \tab \tab \tab Summary of input data and preprocessing \cr
\code{results$trainingMetrics$trainingHistory} \tab \tab \tab \tab \tab Epoch-by-epoch training progress \cr
\code{results$trainingMetrics$finalMetrics} \tab \tab \tab \tab \tab Overall model performance assessment \cr
\code{results$predictionResults$classificationResults} \tab \tab \tab \tab \tab a table \cr
\code{results$predictionResults$cumulativeLogitResults} \tab \tab \tab \tab \tab a table \cr
\code{results$performanceAnalysis$confusionMatrix} \tab \tab \tab \tab \tab Classification confusion matrix \cr
\code{results$performanceAnalysis$classificationReport} \tab \tab \tab \tab \tab Precision, recall, F1-score per class \cr
\code{results$performanceAnalysis$rocAnalysis} \tab \tab \tab \tab \tab ROC AUC scores for each class \cr
\code{results$explainabilityAnalysis$attentionSummary} \tab \tab \tab \tab \tab Summary of attention patterns across samples \cr
\code{results$explainabilityAnalysis$featureImportance} \tab \tab \tab \tab \tab Most important image features for prediction \cr
\code{results$crossValidationResults$cvMetrics} \tab \tab \tab \tab \tab Performance across CV folds \cr
\code{results$crossValidationResults$cvSummary} \tab \tab \tab \tab \tab Mean and standard deviation of CV metrics \cr
\code{results$trainingCurvePlot} \tab \tab \tab \tab \tab Training and validation loss/accuracy over epochs \cr
\code{results$confusionMatrixPlot} \tab \tab \tab \tab \tab Heatmap of confusion matrix \cr
\code{results$rocCurvePlot} \tab \tab \tab \tab \tab ROC curves for each class \cr
\code{results$attentionHeatmapPlot} \tab \tab \tab \tab \tab Sample attention maps showing model focus areas \cr
\code{results$predictionDistributionPlot} \tab \tab \tab \tab \tab Distribution of prediction confidence scores \cr
\code{results$cumulativeLogitPlot} \tab \tab \tab \tab \tab Cumulative probability plots for ordinal prediction \cr
\code{results$crossValidationPlot} \tab \tab \tab \tab \tab Box plots of CV performance metrics \cr
\code{results$modelArchitecturePlot} \tab \tab \tab \tab \tab Visual representation of the neural network architecture \cr
}

Tables can be converted to data frames with \code{asDF} or \code{\link{as.data.frame}}. For example:

\code{results$dataInfo$asDF}

\code{as.data.frame(results$dataInfo)}
}
\description{
Advanced deep learning prediction module for histopathological image
analysis.
Implements Vision Transformer (ViT), ResNet, and other CNN architectures
for
biomarker prediction from H&E-stained tissue images.
}
\examples{
# Basic Vision Transformer prediction
deeplearningprediction(
    data = image_data,
    image_path_var = "image_file_path",
    target_var = "biomarker_status",
    model_type = "vision_transformer",
    attention_maps = TRUE,
    validation_split = 0.2
)

# Cumulative logit with gray-zone
deeplearningprediction(
    data = ordinal_data,
    image_path_var = "image_paths",
    target_var = "ki67_score",
    model_type = "vision_transformer",
    prediction_type = "cumulative_logit",
    gray_zone_width = 5.0,
    thresholds = c(5, 10, 15, 20)
)

}
