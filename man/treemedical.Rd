% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/treemedical.h.R
\name{treemedical}
\alias{treemedical}
\title{Medical Decision Trees}
\usage{
treemedical(
  data,
  vars = NULL,
  facs = NULL,
  target,
  targetLevel,
  validation = "cv",
  cv_folds = 5,
  bootstrap_samples = 100,
  stratified_sampling = TRUE,
  holdout_split = 0.75,
  handle_missing = "remove",
  max_depth = 5,
  min_samples_split = 20,
  cost_complexity = 0.01,
  use_1se_rule = TRUE,
  clinical_context = "diagnosis",
  cost_sensitive = FALSE,
  fn_fp_ratio = 2,
  show_tree_plot = TRUE,
  show_performance_metrics = TRUE,
  show_confusion_matrix = TRUE,
  show_importance_plot = TRUE,
  show_clinical_interpretation = TRUE,
  set_seed = TRUE,
  seed_value = 42
)
}
\arguments{
\item{data}{The data as a data frame containing clinical variables and
outcomes.}

\item{vars}{Continuous variables such as biomarker levels, age,  laboratory
values, or quantitative measurements.}

\item{facs}{Categorical variables such as tumor grade, stage,  histological
type, or patient demographics.}

\item{target}{Primary outcome variable: disease status, treatment response,
or diagnostic category.}

\item{targetLevel}{Level representing disease presence or positive outcome.}

\item{validation}{Validation approach for assessing model performance.}

\item{cv_folds}{Number of folds for cross-validation.}

\item{bootstrap_samples}{Number of bootstrap samples for bootstrap
validation.}

\item{stratified_sampling}{Maintain class proportions in train/test splits.}

\item{holdout_split}{Proportion of data for training in holdout validation
(rest for testing).}

\item{handle_missing}{How to handle missing values in predictor variables.}

\item{max_depth}{Maximum depth of decision tree. Clinical trees typically
3-6 levels.}

\item{min_samples_split}{Minimum number of samples required to split a
node.}

\item{cost_complexity}{Controls tree pruning - lower values create more
complex trees.}

\item{use_1se_rule}{Select simplest tree within 1 SE of optimal
performance.}

\item{clinical_context}{Clinical application context affects interpretation
guidelines.}

\item{cost_sensitive}{Consider different costs of false positives vs false
negatives.}

\item{fn_fp_ratio}{Relative cost of missing positive case vs false alarm.}

\item{show_tree_plot}{Display visual representation of the decision tree.}

\item{show_performance_metrics}{Display accuracy, sensitivity, specificity,
AUC, and clinical metrics.}

\item{show_confusion_matrix}{Display confusion matrix with clinical
interpretations.}

\item{show_importance_plot}{Display ranking of most important clinical
variables.}

\item{show_clinical_interpretation}{Display clinical interpretation and
usage guidelines.}

\item{set_seed}{Set random seed for reproducible results.}

\item{seed_value}{Seed value for random number generation.}
}
\value{
A results object containing:
\tabular{llllll}{
\code{results$instructions} \tab \tab \tab \tab \tab a html \cr
\code{results$model_summary} \tab \tab \tab \tab \tab a html \cr
\code{results$performance_table} \tab \tab \tab \tab \tab a table \cr
\code{results$confusion_matrix} \tab \tab \tab \tab \tab a table \cr
\code{results$variable_importance} \tab \tab \tab \tab \tab a table \cr
\code{results$tree_plot} \tab \tab \tab \tab \tab an image \cr
\code{results$importance_plot} \tab \tab \tab \tab \tab an image \cr
\code{results$clinical_interpretation} \tab \tab \tab \tab \tab a html \cr
}

Tables can be converted to data frames with \code{asDF} or \code{\link{as.data.frame}}. For example:

\code{results$performance_table$asDF}

\code{as.data.frame(results$performance_table)}
}
\description{
Simple decision tree analysis for medical research and clinical decision
making.
Uses enhanced CART algorithm optimized for healthcare applications with
clinical validation, performance metrics, and medical interpretation
guidelines.
}
\examples{
# Example for cancer diagnosis
data(cancer_data)
treemedical(
    data = cancer_data,
    vars = c("PSA", "age"),
    facs = c("grade", "stage"),
    target = "diagnosis",
    targetLevel = "cancer",
    validation = "cv",
    show_tree_plot = TRUE
)

}
