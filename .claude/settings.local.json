{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "WebFetch(domain:github.io)",
      "Bash(Rscript:*)",
      "Bash(sed:*)",
      "Bash(grep:*)",
      "Bash(pdftotext:*)",
      "WebFetch(domain:github.com)",
      "Bash(ls:*)",
      "Bash(gh issue comment:*)",
      "Bash(gh issue list:*)",
      "Bash(gh issue view:*)",
      "WebFetch(domain:cran.r-project.org)",
      "Bash(find:*)",
      "Bash(mv:*)",
      "Bash(rg:*)",
      "WebFetch(domain:rdrr.io)",
      "Bash(gh repo view:*)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(export PATH=\"/Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64:$PATH\")",
      "Bash(RSTUDIO_PANDOC=\"/Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64\" Rscript --vanilla -e \"remove.packages('ClinicoPath', lib = .libPaths()[1]); library(ClinicoPath, lib.loc = '.'); source('R/advancedbarplot.h.R'); data('histopathology'); result <- advancedbarplot(data = histopathology, x_var = 'Group', y_var = 'Age', chart_approach = 'basic'); cat('SUCCESS: Function works\\n')\")",
      "Bash(RSTUDIO_PANDOC=\"/Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64\" Rscript -e \"source('R/advancedbarplot.h.R'); cat('Function signature check:\\n'); cat(deparse(formals(advancedbarplot))[1:5], sep='\\n')\")",
      "Bash(RSTUDIO_PANDOC=\"/Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64\" Rscript -e \"library(ClinicoPath); source('R/advancedbarplot.h.R'); source('R/advancedbarplot.b.R'); data('histopathology'); tryCatch({ result <- advancedbarplot(data = histopathology, x_var = 'Group', y_var = 'Age', chart_approach = 'basic'); cat('SUCCESS: advancedbarplot function works correctly!\\n'); cat('Result class:', class(result), '\\n'); cat('Instructions content length:', nchar(result\\$instructions\\$content), '\\n') }, error = function(e) { cat('ERROR:', conditionMessage(e), '\\n') })\")",
      "Bash(RSTUDIO_PANDOC=\"/Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64\" Rscript -e \"if (!requireNamespace('jmvcore', quietly = TRUE)) install.packages('jmvcore'); library(jmvcore); source('R/advancedbarplot.h.R'); source('R/advancedbarplot.b.R'); data('histopathology', package = 'ClinicoPath'); tryCatch({ result <- advancedbarplot(data = histopathology, x_var = 'Group', y_var = 'Age', chart_approach = 'basic'); cat('SUCCESS: advancedbarplot function works correctly!\\n'); }, error = function(e) { cat('ERROR:', conditionMessage(e), '\\n') })\")",
      "Bash(RSTUDIO_PANDOC=\"/Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64\" Rscript -e \"library(jmvcore); source('R/advancedbarplot.h.R'); cat('SUCCESS: Function definition loads correctly with proper defaults!\\n'); cat('fill_var default:', formals(advancedbarplot)[['fill_var']], '\\n'); cat('facet_var default:', formals(advancedbarplot)[['facet_var']], '\\n')\")",
      "Bash(RSTUDIO_PANDOC=\"/Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64\" Rscript -e 'library(jmvcore); source(\"R/advancedbarplot.h.R\"); cat(\"SUCCESS: Function definition loads correctly!\\n\"); cat(\"fill_var default:\", deparse(formals(advancedbarplot)$fill_var), \"\\n\"); cat(\"facet_var default:\", deparse(formals(advancedbarplot)$facet_var), \"\\n\")')",
      "Bash(RSTUDIO_PANDOC=\"/Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64\" Rscript -e 'library(jmvcore); source(\"R/advancedbarplot.h.R\"); cat(\"SUCCESS: Function loaded correctly!\\n\")')",
      "Bash(RSTUDIO_PANDOC=\"/Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64\" Rscript -e \"if (requireNamespace('ggrain', quietly = TRUE)) { cat('ggrain package available\\n') } else { cat('ggrain package NOT available\\n') }\")",
      "Bash(RSTUDIO_PANDOC=\"/Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64\" Rscript -e \"jmvtools::prepare()\" 2 >& 1)",
      "Bash(RSTUDIO_PANDOC=\"/Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64\" Rscript -e \"if (requireNamespace('ggrain', quietly = TRUE)) { cat('ggrain available\\n'); library(jmvcore); source('R/advancedraincloud.h.R'); source('R/advancedraincloud.b.R'); cat('Function signature check - has default NULL values:\\n'); cat('fill_var default:', deparse(formals(advancedraincloud)\\$fill_var), '\\n'); cat('SUCCESS: Function loads with proper defaults!\\n') } else { cat('ggrain package not available\\n') }\")",
      "Bash(RSTUDIO_PANDOC=\"/Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64\" Rscript -e 'cat(\"Testing advancedraincloud function...\\n\"); library(jmvcore); source(\"R/advancedraincloud.h.R\"); cat(\"Function loaded successfully!\\n\")')",
      "Bash(RSTUDIO_PANDOC=\"/Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64\" Rscript -e \"testthat::test_file('tests/testthat/test-advancedraincloud.R')\")",
      "Bash(RSTUDIO_PANDOC=\"/Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64\" Rscript -e \"cat('Testing vignette compilation...\\n'); if (file.exists('vignettes/jjstatsplot-08-advancedraincloud.qmd')) { cat('Vignette file created successfully\\n'); lines <- readLines('vignettes/jjstatsplot-08-advancedraincloud.qmd', n = 10); cat('First 5 lines of vignette:\\n'); cat(paste(lines[1:5], collapse = '\\n'), '\\n'); cat('SUCCESS: Vignette file is valid\\n') } else { cat('ERROR: Vignette file not found\\n') }\")",
      "Bash(RSTUDIO_PANDOC=\"/Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64\" Rscript -e \"jmvtools::prepare()\")",
      "Bash(RSTUDIO_PANDOC=\"/Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64\" Rscript -e \"devtools::document()\")",
      "Bash(R:*)",
      "WebFetch(domain:r-graph-gallery.com)",
      "Bash(quarto render:*)",
      "Bash(echo:*)",
      "Bash(cp:*)",
      "Bash(awk:*)",
      "mcp__ide__getDiagnostics",
      "WebFetch(domain:chop-cgtinformatics.github.io)",
      "WebFetch(domain:jbengler.github.io)",
      "Bash(diff:*)",
      "Bash(rm:*)",
      "Bash(# Count opening and closing braces in the calculateAdvancedMetrics function\nsed -n ''735,970p'' /Users/serdarbalci/Documents/GitHub/ClinicoPathJamoviModule/R/stagemigration.b.R | tr -cd ''{}'' | fold -w1 | sort | uniq -c)",
      "Bash(# Check the .safeExecute call specifically around lines 780-810\nsed -n ''780,810p'' /Users/serdarbalci/Documents/GitHub/ClinicoPathJamoviModule/R/stagemigration.b.R)",
      "Bash(gemini:*)",
      "WebFetch(domain:indrajeetpatil.github.io)",
      "WebFetch(domain:github.io)",
      "Bash(timeout:*)",
      "WebFetch(domain:www.bmj.com)",
      "WebFetch(domain:www.danieldsjoberg.com)",
      "WebFetch(domain:forum.jamovi.org)",
      "WebFetch(domain:anthropic.com)",
      "WebFetch(domain:tidymodels.org)",
      "WebFetch(domain:rpubs.com)",
      "WebFetch(domain:bookdown.org)",
      "WebFetch(domain:pmc.ncbi.nlm.nih.gov)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(# Count opening and closing braces in the class definition\ngrep -o \"\"[{}]\"\" /Users/serdarbalci/Documents/GitHub/ClinicoPathJamoviModule/R/statsplot2.b.R | sort | uniq -c)",
      "WebFetch(domain:academic.oup.com)",
      "Bash(touch:*)",
      "Bash(python3:*)",
      "Bash(for opt in analysistype awd awod byplot calculatedtime ce censored ch ci95 cutp data dod dooc dxdate elapsedtime endplot fudate kmunicate landmark medianline multievent outcome outcomeLevel outcomeredefined person_time rate_multiplier risktable sc showExplanations showSummaries time_intervals timetypedata timetypeoutput tint uselandmark ybegin_plot yend_plot)",
      "Bash(do echo -n \"$opt: \")",
      "Bash(done)",
      "Bash(for output in todo medianTable medianSummary medianSurvivalExplanation survTable survTableSummary survivalProbabilityExplanation personTimeTable personTimeSummary personTimeExplanation personTimeHeading2 plot plot2 plot3 plot6 survivalPlotsExplanation calculatedtime outcomeredefined)",
      "Bash(do echo -n \"$output: \")",
      "Bash(for output in goldStandardFreqTable crossTabTable indTable1 indTable2 indTable3 combinationsAnalysis combStatsTable combStatsTableCI addCombinationPattern performanceHeatmap rocCurves decisionTree vennDiagram forestPlot)",
      "Bash(if grep -q \"self$results$$output\" /Users/serdarbalci/Documents/GitHub/ClinicoPathJamoviModule/R/decisioncombine.b.R)",
      "Bash(then echo \"✅ Populated\")",
      "Bash(else echo \"❌ Not populated\")",
      "Bash(fi)",
      "Bash(for:*)",
      "Bash(do echo -n \"$file: \")",
      "Bash(if grep -q \"jrs:\" \"$file\")",
      "Bash(then echo \"✅ has jrs\")",
      "Bash(else echo \"❌ missing jrs\")",
      "Bash(do sed -i '' '2a\\\njrs: ''''1.1''''\n' \"$file\")",
      "Bash(do sed -i '' 's/^results:/title: Analysis Results\\nitems:/' \"$file\")",
      "Bash(do if [ -f \"$file\" ])",
      "Bash(then sed -i '' 's/continuous/numeric/g' \"$file\")",
      "Bash(then sed -i '' '/suggested:/,/^[[:space:]]*-/{s/- numeric/- continuous/g}' \"$file\")",
      "Bash(chmod:*)",
      "Bash(/tmp/fix_yaml_types.sh:*)",
      "Bash(do mv jamovi/$module.* /tmp/)",
      "Bash(do cp /tmp/$module.* jamovi/)",
      "Bash(git add:*)",
      "Bash(/tmp/fix_suggested_types.sh:*)",
      "Bash(do echo \"Fixing $file\")",
      "Bash(do echo \"--- $func ---\")",
      "Bash(do echo \"=== $func ===\")",
      "Bash(do if grep -q \"jrs:\" jamovi/$func.r.yaml)",
      "Bash(else echo \"$func: ⚠ missing jrs\")"
    ],
    "deny": []
  }
}